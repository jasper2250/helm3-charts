apiVersion: v1
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZJekNDQkF1Z0F3SUJBZ0lTQTNlQnBZRlRIQUYzdGxLN2lEYy91cmFCTUEwR0NTcUdTSWIzRFFFQkN3VUEKTURJeEN6QUpCZ05WQkFZVEFsVlRNUll3RkFZRFZRUUtFdzFNWlhRbmN5QkZibU55ZVhCME1Rc3dDUVlEVlFRRApFd0pTTXpBZUZ3MHlNVEExTURjd05UTTRNVGRhRncweU1UQTRNRFV3TlRNNE1UZGFNQmt4RnpBVkJnTlZCQU1NCkRpb3VNelF5TlRnMk1UWXpMbWRoTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUEKMUVNUkc1V2ZXOTRIbmcxcXBKWUpzMWFEbWpMc0tSN1BlYkYzQmFJNzkxeWpQV1JFdzNWWkxzN2oycnovWXp5NwpaOEV5SXA0bjQyeXU1ZzJrMVY2V3dCUDc0NENQd0NLWFN5TEx1YTVKRFB3b0NtNG4rcVFtSXZuSWF2UDg2Y0NPCmZGZUphanRMaHU5Sm1IdzU2NVd6cTZ6dW1tenQzSnZ6elVYTHJzMlh0SXptcm1xb1htVHN0YzBsLzNOTVpqWkUKbDJNazU2QUJPOXdQUEJaUE9mWnJ3SElEY0JvbHVtazdtVm0wbWxkN0NsR1NsNTJ4WVptU295NDdNZ1V1L3pHcgpha2l2T0RIanN1VU5FT0VUWlhWL2ZodGpRcFhUUUcxRDRkT0NaandvdHpUbTBCWFV6cjdDRTgzSU1UdzZjZnIyCkJLeERCaUQ5RkhQdEdvMVVKUEFiZXdJREFRQUJvNElDU2pDQ0FrWXdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEcKQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjBHQTFVZApEZ1FXQkJTZFk5Qjd4cTBaMHcwcExTdllNUU5OZ1hCSlR6QWZCZ05WSFNNRUdEQVdnQlFVTHJNWHQxaFd5NjVRCkNVRG1INitkaXhUQ3hqQlZCZ2dyQmdFRkJRY0JBUVJKTUVjd0lRWUlLd1lCQlFVSE1BR0dGV2gwZEhBNkx5OXkKTXk1dkxteGxibU55TG05eVp6QWlCZ2dyQmdFRkJRY3dBb1lXYUhSMGNEb3ZMM0l6TG1rdWJHVnVZM0l1YjNKbgpMekFaQmdOVkhSRUVFakFRZ2c0cUxqTTBNalU0TmpFMk15NW5ZVEJNQmdOVkhTQUVSVEJETUFnR0JtZUJEQUVDCkFUQTNCZ3NyQmdFRUFZTGZFd0VCQVRBb01DWUdDQ3NHQVFVRkJ3SUJGaHBvZEhSd09pOHZZM0J6TG14bGRITmwKYm1OeWVYQjBMbTl5WnpDQ0FRVUdDaXNHQVFRQjFua0NCQUlFZ2ZZRWdmTUE4UUIzQUgwKzh2aVAvNGhWYUNUQwp3TXFlVW9sNUs4VU9lQWwvTG1xWGFKbCtJdkRYQUFBQmVVV01YN1VBQUFRREFFZ3dSZ0loQUlCbVJSRDhnLzJkCjFFQy9QdEw4VmZBZHdJbFRXTlhOTkNlUWR0TG9aZTlNQWlFQXlXMm4xcWdtL3RTVnpmSmhsK3FwUVhpTnJiN0wKdHpjdGNDaWtnRDJLTlVnQWRnQnZVM2FzTWZBeEdkaVpBS1JSRmY5M0ZSd1IyUUxCQUNrR2piSUltamZaRXdBQQpBWGxGakdBZUFBQUVBd0JITUVVQ0lRQ1hHOHlIQjBIMDBCRElqUm5rcmxhTHNXUEhPQyt4MkZVT2xaY0xNUnZDCnVRSWdkajQrUk5NeHlxRm5BVDdOSXMrKzZNYnM1OE9LZlJ0Z3V5Zno3dGszY0lrd0RRWUpLb1pJaHZjTkFRRUwKQlFBRGdnRUJBSzV3RnFnVURQVGtjU0dmZDdvaGFubDM4RFNMVWhSVytRS2FMemxRelRLYTFCZXVBRTk1eXF0bApFUG1QT3NMR0JaRHBxalhzZnFjTndhV1VkYU41RnIwUTAwcWkxRFQ5UVFWcDF2N3FyWDBQcFQyN1FtMEszcTBqCllQOE9MWEdZaElGZ1FTc0pmU0ZSZlo3aDFHRWhxM2RLL3V4Z0h1dDUzbkhlcm9JUHRqTXNGRWJPNW5mR1dmUmgKem1wMnVRVGtRNlduQjFRUnlMdis0TnFTeTVDT0ZvcXc0QmFZL3lLQ29PQ2plNzlLaHpJYnFtWERNNG10U3NqRAp2MSt3bDRhUE1kNHo1RHc5T3Uya2FFVjJkdmh4cEREaiswU0c0M0doWmlIM0h0S2M2dkVXU09EcHBzTGtIcFBMCmdDcUN4NVc5aGRvNldXeU82U2s5eTBIQWFnSTNJcUE9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMUVNUkc1V2ZXOTRIbmcxcXBKWUpzMWFEbWpMc0tSN1BlYkYzQmFJNzkxeWpQV1JFCnczVlpMczdqMnJ6L1l6eTdaOEV5SXA0bjQyeXU1ZzJrMVY2V3dCUDc0NENQd0NLWFN5TEx1YTVKRFB3b0NtNG4KK3FRbUl2bklhdlA4NmNDT2ZGZUphanRMaHU5Sm1IdzU2NVd6cTZ6dW1tenQzSnZ6elVYTHJzMlh0SXptcm1xbwpYbVRzdGMwbC8zTk1aalpFbDJNazU2QUJPOXdQUEJaUE9mWnJ3SElEY0JvbHVtazdtVm0wbWxkN0NsR1NsNTJ4CllabVNveTQ3TWdVdS96R3Jha2l2T0RIanN1VU5FT0VUWlhWL2ZodGpRcFhUUUcxRDRkT0NaandvdHpUbTBCWFUKenI3Q0U4M0lNVHc2Y2ZyMkJLeERCaUQ5RkhQdEdvMVVKUEFiZXdJREFRQUJBb0lCQUJudnQvOXU0UElReDAyQQp4aThtUmprcnNSaitiK3oyWHRPMzQ1dEVuNTh5S3FBdHlGazUxWlBxbzl6dWl5Wk5IWGtvR2tBd294OGZBS0FMCnVzQjN0bVB5RFMxWFlEbFNBTHFsbmM4cWhMS1pmU3NKR3NsOWxVdGd5aVNIZTdmMFYzVEtIWGhsbG16K2dEZXAKdGtvYkdNRTVlRTVXVVJwTDFCYVpHTEpiWE5ZcXlHSzQvUXVsbE5kTlJVMXhnNjlxd0UzTkxOUTVScjVUY0lOawpDZWp4SStuRlpXeHAxTDN0OXNRZXltdGpuU0trZDcrRnNlcGdMTCtCaTR0bk0vb2pnbnI1cVlKbFFqOWYwK1hqCnoxRyt1d1FicXliSnZWTTg0cXoxaFFIaWk1WEhKOWVESHVidE53MGRtQXRUM1RTcWsxaC9VZmVkbWVRMkFLK0gKWTRwRGpZRUNnWUVBOGpiNWdMamN4SFJuS1lLbk9iMXl6UG10MGNnMkFQM2FCSWxUU3ZOMjRzRmRJWGwyUUNMYQpkZUxGbGE3T1NzdVErZmU4VjRGemJWVVVBemtjSUp5M1J4TnZCejdUeXhjaXNuUFppaHRTY2M4OVgyOWpOcDVJCmh5MHlqTFBKY3I0Y0tSOWRqc0toRjV2dFZuSWNBYnJIaGhZcFdWaWtiM21XNktnOXg1N0NYOWtDZ1lFQTRGZXYKa0ZxRHkwT2g4R0Y0YUk4OU5kOUNhVlBtOXd4UzVPS3lPVStiZ3dWdTdpNXFrcjBReThqUWhlcFI3bEdnUzhZUgpZcEdSbGhrM3laYWQ0eDc2WDBYV3N4amREWGFjSkxsdEorM2dKdWs0RDRLODFvYzRQWXF1TWhKZDBoZzF0MWJiCjMyMnR0dXpiN29VejVaVHdMUldPRmpZUldSNlROTnh4TllTc1ZYTUNnWUVBOEhsWUdVNXdFTE9vd0hPdzV3aUoKODZ0bndVRlBMSWpiYldtUnduWVpjR09kdk9CRVlNUzV0QlNqS2tyVkVUa3VCSjdLNU8zbTFZT0VUUGJrVUJTSAplZzkzU2ZBOGdnUEVOUHdEM0xQbmxJcTJXZ3ZTcXFWWFNLMjg1Q2lUTmxJOHp5OE95ZSs5MUJ6QTgvUnlqZDBNCnZyazk4RENyZ09sc3hDeFV1ZDJMQ1hFQ2dZQlpJTjBpTjZQR3ZKNzR0bkMwOGJ0NnpMRkEwVkdnY3VmNEFVeVgKVWxaUlRuWk04R25zMUdwNDI5WmtiYnlSTnlLOUYvck9NMUVvMWVvQkQvSzRTaFZraG9XTzcrRGF1WFc5YldHOQpqRmNTZm5PRVRnZWlIMlNycG80Z1hJV2pzM1NiMjBsTlVmREREUVV2bFFJU1F3TE1scFMxcEZOdUdhU1lTc0E3ClovTmptd0tCZ1FEVXFuZGFIaUxRc3dwRW50bG1LRlp0cW5hK29sM1ZiZUx1dkdRMUt4R1BxRjRrSGNxTXpWdnMKVnJ5WWw0WklPQkVyalpWWVIrMzdIazgrODdveU9IaXB3d1h4QkdVU0dKNkVJbXVjb09VVmhXa2ZpYllIa2RwUwpmSXBFR2NnelY3OXFuRVRtckczZmNzU3FUMjgrUDkzaWJtZkNydFpVZmVORjVmSXV5V09BTUE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
kind: Secret
metadata:
  name: nexus-secret
type: kubernetes.io/tls
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nexus-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "1024m"
spec:
  rules:
  - host: nexus.342586163.ga
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: {{ .Release.Name }}-nexus-repository-manager
            port:
              number: 8081
  tls:
      - hosts:
          - nexus.342586163.ga
        secretName: nexus-secret
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
data:
  nginx.conf: |
    upstream nexus_docker_get {
        server {{ .Release.Name }}-nexus-repository-manager:8082;
    }
     
    upstream nexus_docker_put {
        server {{ .Release.Name }}-nexus-repository-manager:8083;
    }
    server {
        listen 80;
        server_name localhost;

        client_max_body_size 0;
        chunked_transfer_encoding on;

        set $upstream "nexus_docker_put";

        if ( $request_method ~* 'GET') {
            set $upstream "nexus_docker_get";
        }

        if ($request_uri ~ '/search') {
            set $upstream "nexus_docker_put"; 
        }
        
        index index.html index.htm index.php;
        
        location / {
            proxy_pass http://$upstream;
            proxy_set_header Host $host;
            proxy_connect_timeout 3600;
            proxy_send_timeout 3600;
            proxy_read_timeout 3600;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_buffering off;
            proxy_request_buffering off;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
        }
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  selector:
    matchLabels:
      app: nginx
  replicas: 1
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80
        - containerPort: 443
        volumeMounts:
            - name: nginx-conf
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: nginx.conf
              readOnly: true
      volumes:
      - name: nginx-conf
        configMap:
          name: nginx-conf
          items:
            - key: nginx.conf
              path: nginx.conf

---
apiVersion: v1
kind: Service
metadata:
  name: nginx
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 80
  - name: https
    port: 443
    protocol: TCP
    targetPort: 443    
  selector:
    app: nginx
    
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "1024m"
spec:
  rules:
  - host: docker.342586163.ga
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nginx
            port:
              number: 80
  tls:
      - hosts:
          - docker.342586163.ga
        secretName: nexus-secret